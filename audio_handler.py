import requests
import json
import logging
import openai
from config import ELEVENLABS_API_KEY, OPENAI_API_KEY

logger = logging.getLogger(__name__)

class AudioHandler:
    def __init__(self):
        self.api_key = ELEVENLABS_API_KEY
        self.base_url = "https://api.elevenlabs.io/v1"
        self.voice_id = "pNInz6obpgDQGcFmaJgB"  # Eleven3 alpha (Adam - male voice)
        
        # Initialize OpenAI client for text generation
        self.openai_client = openai.OpenAI(api_key=OPENAI_API_KEY)
        
    def generate_audio_summary(self, match_result: str, user_query: str) -> str:
        """
        Generate audio summary starting with "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥—É–º–∞—é, —â–æ..."
        Returns the path to the generated audio file
        """
        try:
            # Create summary text using ChatGPT for better quality
            summary_text = self._create_summary_with_chatgpt(match_result, user_query)
            logger.info(f"üìù Created audio summary text: {summary_text[:100]}...")
            
            # Generate audio using ElevenLabs API
            audio_path = self._generate_audio(summary_text)
            logger.info(f"üéµ Generated audio file: {audio_path}")
            
            return audio_path
            
        except Exception as e:
            logger.error(f"‚ùå Error generating audio summary: {e}")
            return None
    
    def _create_summary_text(self, match_result: str, user_query: str) -> str:
        """
        Create a summary text that paraphrases only the "–ß–æ–º—É –∫–æ—Ä–∏—Å–Ω–∏–π –¥–ª—è –≤–∞—Å" part
        """
        # Extract key information from match result
        lines = match_result.split('\n')
        expert_name = ""
        match_percentage = ""
        description = ""
        reason = ""
        
        for line in lines:
            if "–ó–Ω–∞–π–¥–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç:" in line:
                # Remove emoji and clean up the name
                expert_name = line.replace("üíº –ó–Ω–∞–π–¥–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç:", "").strip()
                expert_name = expert_name.replace("‚Äî", "-").strip()
            elif "–ó–±—ñ–≥ ‚Äî" in line:
                match_percentage = line.replace("üßÆ –ó–±—ñ–≥ ‚Äî", "").strip()
        
        # Get description part
        desc_start = match_result.find("üìã –ü—Ä–æ –µ–∫—Å–ø–µ—Ä—Ç–∞:")
        if desc_start != -1:
            desc_part = match_result[desc_start:]
            desc_lines = desc_part.split('\n')[1:]  # Skip the header
            # Find the end of description (before "–ß–æ–º—É –∫–æ—Ä–∏—Å–Ω–∏–π")
            desc_text = []
            for line in desc_lines:
                if "–ß–æ–º—É –∫–æ—Ä–∏—Å–Ω–∏–π –¥–ª—è –≤–∞—Å:" in line:
                    break
                desc_text.append(line.strip())
            description = ' '.join(desc_text[:2])  # Take first 2 lines
        
        # Get reason part
        reason_start = match_result.find("–ß–æ–º—É –∫–æ—Ä–∏—Å–Ω–∏–π –¥–ª—è –≤–∞—Å:")
        if reason_start != -1:
            reason_part = match_result[reason_start:]
            reason_lines = reason_part.split('\n')[1:]  # Skip the header
            reason_text = []
            for line in reason_lines:
                if line.strip() and not line.startswith("üìã") and not line.startswith("üíº") and not line.startswith("‚ú®"):
                    # Clean the line from emojis
                    clean_line = line.replace("‚úÖ", "").strip()
                    if clean_line:
                        reason_text.append(clean_line)
            reason = ' '.join(reason_text[:1])  # Take first line
            
        # Create summary with paraphrased reason
        summary = "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥—É–º–∞—é, —â–æ –∑–Ω–∞–π—à–æ–≤ –¥–ª—è –≤–∞—Å —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –µ–∫—Å–ø–µ—Ä—Ç–∞. "
        
        if expert_name:
            summary += f"–¶–µ {expert_name}. "
            
        if match_percentage:
            summary += f"–ó–±—ñ–≥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å {match_percentage}. "
            
        if description:
            # Keep description as is, just clean emojis
            clean_desc = description.replace("‚úÖ", "").replace("üìã", "").replace("üíº", "").replace("üßÆ", "").strip()
            summary += f"–ï–∫—Å–ø–µ—Ä—Ç {clean_desc}. "
            
        if reason:
            # Paraphrase only the reason part
            clean_reason = reason.replace("‚ú®", "").replace("‚úÖ", "").strip()
            # Simple paraphrasing for the reason
            paraphrased_reason = self._paraphrase_reason(clean_reason)
            summary += f"{paraphrased_reason}. "
        else:
            # If no reason found, add default
            summary += "–ö–æ—Ä–∏—Å–Ω–∏–π —Ç–æ–º—É —â–æ –º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –¥–æ—Å–≤—ñ–¥ —Ç–∞ –Ω–∞–≤–∏—á–∫–∏ –¥–ª—è –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. "
            
        summary += "–†–µ–∫–æ–º–µ–Ω–¥—É—é –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ü—å–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª–∞ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ."
        
        return summary
    
    def _create_summary_with_chatgpt(self, match_result: str, user_query: str) -> str:
        """
        Create a realistic summary text using ChatGPT for better quality and naturalness
        """
        try:
            # Extract key information from match result
            lines = match_result.split('\n')
            expert_name = ""
            match_percentage = ""
            description = ""
            reason = ""
            
            for line in lines:
                if "–ó–Ω–∞–π–¥–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç:" in line:
                    expert_name = line.replace("üíº –ó–Ω–∞–π–¥–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç:", "").strip()
                    expert_name = expert_name.replace("‚Äî", "-").strip()
                elif "–ó–±—ñ–≥ ‚Äî" in line:
                    match_percentage = line.replace("üßÆ –ó–±—ñ–≥ ‚Äî", "").strip()
            
            # Get description part
            desc_start = match_result.find("üìã –ü—Ä–æ –µ–∫—Å–ø–µ—Ä—Ç–∞:")
            if desc_start != -1:
                desc_part = match_result[desc_start:]
                desc_lines = desc_part.split('\n')[1:]
                desc_text = []
                for line in desc_lines:
                    if "–ß–æ–º—É –∫–æ—Ä–∏—Å–Ω–∏–π –¥–ª—è –≤–∞—Å:" in line:
                        break
                    desc_text.append(line.strip())
                description = ' '.join(desc_text[:2])
            
            # Get reason part
            reason_start = match_result.find("–ß–æ–º—É –∫–æ—Ä–∏—Å–Ω–∏–π –¥–ª—è –≤–∞—Å:")
            if reason_start != -1:
                reason_part = match_result[reason_start:]
                reason_lines = reason_part.split('\n')[1:]
                reason_text = []
                for line in reason_lines:
                    if line.strip() and not line.startswith("üìã") and not line.startswith("üíº") and not line.startswith("‚ú®"):
                        clean_line = line.replace("‚úÖ", "").strip()
                        if clean_line:
                            reason_text.append(clean_line)
                reason = ' '.join(reason_text[:1])
            
            # Create prompt for ChatGPT
            system_prompt = """–¢–∏ - –¥—Ä—É–∂–Ω—ñ–π –±—ñ–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –ª—é–¥—è–º –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤ –¥–ª—è —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ. 
–°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–∏—Ä–æ–¥–Ω–∏–π —Ç–∞ –ø–µ—Ä–µ–∫–æ–Ω–ª–∏–≤–∏–π —Ç–µ–∫—Å—Ç-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, —è–∫–∏–π –ø–æ—á–Ω–µ—Ç—å—Å—è –∑ "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥—É–º–∞—é, —â–æ...".
–¢–µ–∫—Å—Ç –º–∞—î –∑–≤—É—á–∞—Ç–∏ —Ç–∞–∫, –Ω—ñ–±–∏ —Ç–∏ –æ—Å–æ–±–∏—Å—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—à —Ü—å–æ–≥–æ –µ–∫—Å–ø–µ—Ä—Ç–∞ —ñ —Ä–∞–¥–∏—à –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –Ω–∏–º.
–ë—É–¥—å –µ–Ω—Ç—É–∑—ñ–∞—Å—Ç–∏—á–Ω–∏–º, –∞–ª–µ –Ω–µ –Ω–∞–¥—Ç–æ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–º. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø—Ä–∏—Ä–æ–¥–Ω—É –º–æ–≤—É, —è–∫ —É —Ä–æ–∑–º–æ–≤—ñ –∑ –¥—Ä—É–≥–æ–º."""
            
            user_prompt = f"""–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —à—É–∫–∞–≤: {user_query}

–ó–Ω–∞–π–¥–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç: {expert_name}
–ó–±—ñ–≥: {match_percentage}
–ü—Ä–æ –µ–∫—Å–ø–µ—Ä—Ç–∞: {description}
–ß–æ–º—É –∫–æ—Ä–∏—Å–Ω–∏–π: {reason}

–°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é (3-4 —Ä–µ—á–µ–Ω–Ω—è), —è–∫–∏–π –ø–æ—á–Ω–µ—Ç—å—Å—è –∑ "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥—É–º–∞—é, —â–æ..." —ñ –∑–≤—É—á–∞—Ç–∏–º–µ —è–∫ –æ—Å–æ–±–∏—Å—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –≤—ñ–¥ –¥—Ä—É–≥–∞."""
            
            response = self.openai_client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=150,
                temperature=0.7
            )
            
            summary = response.choices[0].message.content.strip()
            logger.info(f"ü§ñ ChatGPT generated summary: {summary[:100]}...")
            
            return summary
            
        except Exception as e:
            logger.error(f"‚ùå Error creating summary with ChatGPT: {e}")
            # Fallback to original method
            return self._create_summary_text(match_result, user_query)
    
    def _paraphrase_reason(self, reason: str) -> str:
        """
        Paraphrase the reason text to make it sound more natural
        """
        # Simple paraphrasing rules
        paraphrases = {
            "–†–æ–∑—Ä–æ–±–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è": "–º–∞—î –¥–æ—Å–≤—ñ–¥ —É —Ä–æ–∑—Ä–æ–±—Ü—ñ –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è",
            "–î–æ—Å–≤—ñ–¥ —É —Å—Ñ–µ—Ä—ñ —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É": "—Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –Ω–∞ —à—Ç—É—á–Ω–æ–º—É —ñ–Ω—Ç–µ–ª–µ–∫—Ç—ñ",
            "Making angel investments": "–∑–∞–π–º–∞—î—Ç—å—Å—è –∞–Ω–≥–µ–ª—å—Å—å–∫–∏–º–∏ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è–º–∏",
            "Investment in a real estate": "—ñ–Ω–≤–µ—Å—Ç—É—î –≤ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å",
            "Fundraising": "–¥–æ–ø–æ–º–∞–≥–∞—î –∑ –∑–∞–ª—É—á–µ–Ω–Ω—è–º –∫–æ—à—Ç—ñ–≤",
            "Investing": "–º–∞—î –¥–æ—Å–≤—ñ–¥ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è",
            "Making investments": "–∑–∞–π–º–∞—î—Ç—å—Å—è —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è–º",
            "Marketing": "—Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É",
            "Business development": "–∑–∞–π–º–∞—î—Ç—å—Å—è —Ä–æ–∑–≤–∏—Ç–∫–æ–º –±—ñ–∑–Ω–µ—Å—É",
            "Startups": "–ø—Ä–∞—Ü—é—î –∑—ñ —Å—Ç–∞—Ä—Ç–∞–ø–∞–º–∏"
        }
        
        # Try to find and replace known phrases
        for original, paraphrase in paraphrases.items():
            if original.lower() in reason.lower():
                return reason.replace(original, paraphrase)
        
        # If no specific paraphrase found, add a natural prefix
        if reason.strip():
            return f"–ö–æ—Ä–∏—Å–Ω–∏–π —Ç–æ–º—É —â–æ {reason.strip()}"
        
        return "–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –¥–æ—Å–≤—ñ–¥ —Ç–∞ –Ω–∞–≤–∏—á–∫–∏ –¥–ª—è –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É"
    
    def _generate_audio(self, text: str) -> str:
        """
        Generate audio file using ElevenLabs API
        """
        url = f"{self.base_url}/text-to-speech/{self.voice_id}"
        
        headers = {
            "Accept": "audio/mpeg",
            "Content-Type": "application/json",
            "xi-api-key": self.api_key
        }
        
        data = {
            "text": text,
            "model_id": "eleven_v3",  # Eleven3 alpha model
            "voice_settings": {
                "stability": 0.5,
                "similarity_boost": 0.5
            }
        }
        
        # Add timeout to prevent hanging
        response = requests.post(url, json=data, headers=headers, timeout=30)
        
        if response.status_code == 200:
            # Save audio file
            audio_filename = f"audio_summary_{hash(text) % 10000}.mp3"
            audio_path = f"/tmp/{audio_filename}"
            
            with open(audio_path, 'wb') as f:
                f.write(response.content)
                
            return audio_path
        else:
            logger.error(f"‚ùå ElevenLabs API error: {response.status_code} - {response.text}")
            raise Exception(f"ElevenLabs API error: {response.status_code}")
    
    def cleanup_audio_file(self, audio_path: str):
        """
        Clean up temporary audio file
        """
        try:
            import os
            if os.path.exists(audio_path):
                os.remove(audio_path)
                logger.info(f"üóëÔ∏è Cleaned up audio file: {audio_path}")
        except Exception as e:
            logger.error(f"‚ùå Error cleaning up audio file: {e}")
