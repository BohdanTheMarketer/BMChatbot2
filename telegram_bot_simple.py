#!/usr/bin/env python3
"""
Simple Telegram Bot for Business Match
Uses direct API calls instead of python-telegram-bot library
"""

import requests
import json
import time
import logging
import fcntl
import os
from datetime import datetime, timedelta
from data_handler import DataHandler
from chatgpt_handler import ChatGPTHandler
from config import TELEGRAM_BOT_TOKEN, USERS_CSV_PATH
from database import Database
from audio_handler import AudioHandler

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SimpleTelegramBot:
    def __init__(self):
        self.token = TELEGRAM_BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        self.data_handler = DataHandler(USERS_CSV_PATH)
        self.chatgpt_handler = ChatGPTHandler(self.data_handler)
        self.database = Database()  # Initialize database
        self.audio_handler = AudioHandler()
        self.user_sessions = {}
        self.user_last_search_time = {}  # Track when each user last searched (24h limit)
        self.last_update_id = 0
        self.processed_updates = set()  # Track processed updates to prevent duplicates
        
        # File lock to prevent multiple bot instances
        self.lock_file = "/tmp/bmchatbot.lock"
        self.lock_fd = None
        self._acquire_lock()
    
    def _acquire_lock(self):
        """Acquire file lock to prevent multiple bot instances"""
        try:
            self.lock_fd = os.open(self.lock_file, os.O_CREAT | os.O_WRONLY | os.O_TRUNC)
            fcntl.flock(self.lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
            logger.info("üîí File lock acquired - single bot instance ensured")
        except (OSError, IOError):
            logger.error("‚ùå Another bot instance is already running!")
            raise SystemExit("Bot instance already running")
    
    def _cleanup_lock(self):
        """Release file lock"""
        try:
            if self.lock_fd:
                fcntl.flock(self.lock_fd, fcntl.LOCK_UN)
                os.close(self.lock_fd)
                os.unlink(self.lock_file)
                logger.info("üîì File lock released")
        except Exception as e:
            logger.error(f"Error releasing lock: {e}")
    
    def get_user_session(self, user_id: int) -> ChatGPTHandler:
        """Get or create user session"""
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = ChatGPTHandler(self.data_handler)
        return self.user_sessions[user_id]
    
    def log_user(self, user_id: int, username: str = None, first_name: str = None, last_name: str = None):
        """Log user information to database"""
        try:
            self.database.add_user(user_id, username, first_name, last_name)
        except Exception as e:
            logger.error(f"Error logging user {user_id}: {e}")
    
    def log_message(self, user_id: int, content: str, is_bot: bool = False, message_type: str = "text"):
        """Log message to database"""
        try:
            self.database.add_message(user_id, content, is_bot, message_type)
        except Exception as e:
            logger.error(f"Error logging message for user {user_id}: {e}")
    
    def log_search(self, user_id: int, search_query: str, search_result: str = None):
        """Log search to database"""
        try:
            self.database.add_search(user_id, search_query, search_result)
        except Exception as e:
            logger.error(f"Error logging search for user {user_id}: {e}")
    
    def can_user_search(self, user_id: int) -> tuple[bool, str]:
        """Check if user can make a search (24h limit)"""
        current_time = datetime.now()
        
        if user_id not in self.user_last_search_time:
            return True, ""
        
        last_search = self.user_last_search_time[user_id]
        time_passed = current_time - last_search
        
        if time_passed >= timedelta(hours=24):
            return True, ""
        
        # Calculate remaining time
        remaining_time = timedelta(hours=24) - time_passed
        hours = int(remaining_time.total_seconds() // 3600)
        minutes = int((remaining_time.total_seconds() % 3600) // 60)
        
        if hours > 0:
            time_str = f"{hours} –≥–æ–¥. {minutes} —Ö–≤."
        else:
            time_str = f"{minutes} —Ö–≤."
        
        return False, time_str
    
    def _is_search_query(self, text: str) -> bool:
        """Check if the message is a search query or other message"""
        text_lower = text.lower().strip()
        
        # Non-search indicators
        non_search_indicators = [
            "–¥—è–∫—É—é", "—Å–ø–∞—Å–∏–±—ñ", "thank you", "thanks",
            "–ø—Ä–∏–≤—ñ—Ç", "–≤—ñ—Ç–∞—é", "–¥–æ–±—Ä–∏–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è", "hello", "hi",
            "—è–∫ —Å–ø—Ä–∞–≤–∏", "—â–æ –Ω–æ–≤–æ–≥–æ", "how are you",
            "–¥–æ–ø–æ–º–æ–∂–∏", "help", "–¥–æ–ø–æ–º–æ–≥–∞",
            "—â–æ —Ä–æ–±–∏—à", "—â–æ –º–æ–∂–Ω–∞", "–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ",
            "—Ç–µ—Å—Ç", "test", "–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞",
            "–ø—Ä–∞—Ü—é—î", "—Ä–æ–±–æ—Ç–∞", "work",
            "—Å—Ç–∞—Ä—Ç", "start", "–ø–æ—á–∞—Ç–∏",
            "—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "information", "—ñ–Ω—Ñ–æ", "info"
        ]
        
        # Check for non-search indicators
        for indicator in non_search_indicators:
            if indicator in text_lower:
                return False
        
        # Check for search keywords
        search_keywords = [
            "—à—É–∫–∞—é", "–ø–æ—Ç—Ä—ñ–±–µ–Ω", "–ø–æ—Ç—Ä—ñ–±–Ω—ñ", "–ø–æ—Ç—Ä—ñ–±–Ω–∞", "–ø–æ—Ç—Ä—ñ–±–Ω–æ",
            "–µ–∫—Å–ø–µ—Ä—Ç", "—Ñ–∞—Ö—ñ–≤–µ—Ü—å", "—Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç", "–ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª",
            "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–¥–∏–∑–∞–π–Ω", "—Ä–æ–∑—Ä–æ–±–∫–∞", "–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
            "—ñ–Ω–≤–µ—Å—Ç–æ—Ä", "—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "–±—ñ–∑–Ω–µ—Å", "—Å—Ç–∞—Ä—Ç–∞–ø",
            "–º–µ–Ω—Ç–æ—Ä", "–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "—Ç—Ä–µ–Ω–µ—Ä", "–∫–æ—É—á",
            "–ø—Ä–æ–¥–∞–∂—ñ", "—Ä–µ–∫–ª–∞–º–∞", "PR", "–±—Ä–µ–Ω–¥–∏–Ω–≥",
            "—Ñ—ñ–Ω–∞–Ω—Å–∏", "–±—É—Ö–≥–∞–ª—Ç–µ—Ä", "—é—Ä–∏—Å—Ç", "HR",
            "IT", "—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó", "—Ü–∏—Ñ—Ä–æ–≤—ñ", "–æ–Ω–ª–∞–π–Ω"
        ]
        
        # If contains search keywords, it's likely a search query
        for keyword in search_keywords:
            if keyword in text_lower:
                return True
        
        # If very short and no clear indicators, treat as non-search
        if len(text_lower) < 10:
            return False
        
        # Default to search query for longer messages without clear non-search indicators
        return True
    
    def send_message(self, chat_id: int, text: str, parse_mode: str = "Markdown"):
        """Send a message to a chat"""
        url = f"{self.base_url}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": parse_mode
        }
        
        try:
            response = requests.post(url, json=data)
            return response.json()
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            return None
    
    def send_photo(self, chat_id: int, photo_url: str, caption: str = ""):
        """Send a photo to a chat"""
        url = f"{self.base_url}/sendPhoto"
        data = {
            "chat_id": chat_id,
            "photo": photo_url,
            "caption": caption,
            "parse_mode": "Markdown"
        }
        
        try:
            logger.info(f"Sending photo to chat {chat_id}: {photo_url}")
            response = requests.post(url, json=data)
            result = response.json()
            if response.status_code == 200:
                logger.info(f"‚úÖ Photo sent successfully to chat {chat_id}")
            else:
                logger.error(f"‚ùå Failed to send photo: HTTP {response.status_code}: {result}")
            return result
        except Exception as e:
            logger.error(f"Error sending photo: {e}")
            return None
    
    def send_audio(self, chat_id: int, audio_path: str):
        """Send an audio file to a chat"""
        url = f"{self.base_url}/sendAudio"
        
        try:
            with open(audio_path, 'rb') as audio_file:
                files = {'audio': audio_file}
                data = {
                    'chat_id': chat_id,
                    'title': '–ü—ñ–¥—Å—É–º–æ–∫ –∑–±—ñ–≥—É',
                    'performer': 'Business Match Bot'
                }
                
                response = requests.post(url, files=files, data=data)
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ Audio sent to chat {chat_id}")
                    return True
                else:
                    logger.error(f"‚ùå Failed to send audio: {response.status_code} - {response.text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Error sending audio: {e}")
            return False
    
    def send_typing(self, chat_id: int):
        """Send typing indicator"""
        url = f"{self.base_url}/sendChatAction"
        data = {
            "chat_id": chat_id,
            "action": "typing"
        }
        
        try:
            requests.post(url, json=data)
        except Exception as e:
            logger.error(f"Error sending typing: {e}")
    
    def get_updates(self):
        """Get new updates from Telegram"""
        url = f"{self.base_url}/getUpdates"
        params = {
            "offset": self.last_update_id + 1,
            "timeout": 10,
            "allowed_updates": ["message"]
        }
        
        try:
            response = requests.get(url, params=params, timeout=35)
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"HTTP {response.status_code}: {response.text}")
                return None
        except requests.exceptions.Timeout:
            # Timeout is normal for long polling
            return {"ok": True, "result": []}
        except Exception as e:
            logger.error(f"Error getting updates: {e}")
            return None
    
    def handle_start_command(self, chat_id: int, user_id: int, user_info: dict = None):
        """Handle /start command"""
        logger.info(f"üöÄ Starting /start command for user {user_id} in chat {chat_id}")
        
        # Log user information if available
        if user_info:
            self.log_user(
                user_id, 
                user_info.get('username'),
                user_info.get('first_name'),
                user_info.get('last_name')
            )
        
        # Log the /start command
        self.log_message(user_id, "/start", False, "start")
        
        # Send Business Match image first
        logger.info(f"üì∏ Attempting to send Business Match image to chat {chat_id}")
        # Use your Business Match image from Postimage
        business_match_image_url = "https://i.postimg.cc/mtFChPhV/ChatGPT-Image-15-–≤–µ—Ä-2025-—Ä-18-52-13.png"
        logger.info(f"Using Business Match image URL: {business_match_image_url}")
        self.send_photo(chat_id, business_match_image_url, caption="üöÄ Business Match - –í–∞—à –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ –Ω–µ—Ç–≤–æ—Ä–∫—ñ–Ω–≥—É")
        
        # Use the new greeting message directly
        message = """–í—ñ—Ç–∞—î–º–æ —É Business Match üöÄ
–Ø ‚Äî –≤–∞—à –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ–≥–æ –Ω–µ—Ç–≤–æ—Ä–∫—ñ–Ω–≥—É. –£ –Ω–∞—à—ñ–π –±–∞–∑—ñ –ø–æ–Ω–∞–¥ 50 000+ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤, –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–æ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ. –î–æ–ø–æ–º–æ–∂—É —à–≤–∏–¥–∫–æ –∑–Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ —Ç–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É –±—ñ–∑–Ω–µ—Å—É üìà

ü§ù –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:
–û–ø–∏—à—ñ—Ç—å, –∫–æ–≥–æ —à—É–∫–∞—î—Ç–µ: –≥–∞–ª—É–∑—å, —Ä–æ–ª—å, —Ä—ñ–≤–µ–Ω—å, –≥–µ–æ–≥—Ä–∞—Ñ—ñ—è, —Ñ–æ—Ä–º–∞—Ç —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ.

üìå –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤:
‚Ä¢ ¬´–®—É–∫–∞—é –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥—ñ–≤ –¥–ª—è IT-—Å—Ç–∞—Ä—Ç–∞–ø—É¬ª
‚Ä¢ ¬´–ü–æ—Ç—Ä—ñ–±–Ω—ñ —ñ–Ω–≤–µ—Å—Ç–æ—Ä–∏ –¥–ª—è e-commerce –ø—Ä–æ—î–∫—Ç—É¬ª
‚Ä¢ ¬´–•–æ—á—É –∑—É—Å—Ç—Ä—ñ—Ç–∏—Å—è –∑ –ø—ñ–¥–ø—Ä–∏—î–º—Ü—è–º–∏ —É —Å—Ñ–µ—Ä—ñ –æ—Ö–æ—Ä–æ–Ω–∏ –∑–¥–æ—Ä–æ–≤'—è¬ª
‚Ä¢ ¬´–®—É–∫–∞—é –º–µ–Ω—Ç–æ—Ä–∞ –∑ digital-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É¬ª

–Ø –∑—ñ—Å—Ç–∞–≤–ª—é –≤–∞—à –∑–∞–ø–∏—Ç —ñ–∑ –±–∞–∑–æ—é —Ç–∞ –Ω–∞–¥–∞–º –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ —ñ–∑ –æ–±“ë—Ä—É–Ω—Ç—É–≤–∞–Ω–Ω—è–º ‚úÖ"""
        
        self.send_message(chat_id, message)
    
    def handle_text_message(self, chat_id: int, user_id: int, text: str):
        """Handle text messages"""
        logger.info(f"üîç Processing text message from user {user_id}: {text[:50]}...")
        
        # Log user message
        self.log_message(user_id, text, False, "text")
        
        # Check if user can search (24h limit)
        can_search, remaining_time = self.can_user_search(user_id)
        logger.info(f"‚è∞ User {user_id} can search: {can_search}, remaining time: '{remaining_time}'")
        
        if not can_search:
            logger.info(f"üö´ Blocking user {user_id} due to 24h limit")
            limit_message = (f"‚è∞ **–õ—ñ–º—ñ—Ç –ø–æ—à—É–∫—É!**\n\n"
                f"–í–∏ –≤–∂–µ –∑—Ä–æ–±–∏–ª–∏ –ø–æ—à—É–∫ –º–µ–Ω—à–µ –Ω—ñ–∂ 24 –≥–æ–¥–∏–Ω–∏ —Ç–æ–º—É.\n"
                f"**–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑:** {remaining_time}\n\n"
                f"üöÄ **–î–ª—è –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫ Business Match:**\n\n"
                f"üì± [Business Match App](https://apps.apple.com/ua/app/business-match-social-app/id1547614364)\n\n"
                f"‚ú® –¢–∞–º –≤–∏ –∑–º–æ–∂–µ—Ç–µ —Ä–æ–±–∏—Ç–∏ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—à—É–∫—ñ–≤ —Ç–∞ –∑–Ω–∞–π—Ç–∏ –≤—Å—ñ—Ö –µ–∫—Å–ø–µ—Ä—Ç—ñ–≤!")
            
            self.send_message(chat_id, limit_message)
            self.log_message(user_id, limit_message, True, "text")
            return
        
        chatgpt_handler = self.get_user_session(user_id)
        
        # Check if this is a search query or other message
        is_search_query = self._is_search_query(text)
        
        if not is_search_query:
            # Handle non-search messages with ChatGPT
            logger.info(f"üí¨ Handling non-search message from user {user_id}")
            response = chatgpt_handler.handle_non_search_message(text)
            self.send_message(chat_id, response)
            return
        
        # This is a search query - use custom model
        logger.info(f"üîç Handling search query from user {user_id}")
        
        # Send typing indicator
        self.send_typing(chat_id)
        
        # Send progress messages with delays
        self.send_message(chat_id, "üì• **–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó...**")
        import time
        time.sleep(3)
        
        self.send_message(chat_id, "ü§ñ **–û–±—Ä–æ–±–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI...**")
        time.sleep(3)
        
        self.send_message(chat_id, "üîç **–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ –≤–∞—à –∑–∞–ø–∏—Ç...**")
        time.sleep(3)
        
        self.send_message(chat_id, "‚è≥ **–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–±—ñ–≥—ñ–≤... (—Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 2 —Ö–≤–∏–ª–∏–Ω)**")
        
        # Get matches from custom model with error handling
        logger.info(f"üîÑ Calling custom model for user {user_id}...")
        try:
            matches_response = chatgpt_handler.analyze_user_preferences(text)
            logger.info(f"‚úÖ Custom model response received for user {user_id}")
        except Exception as e:
            logger.error(f"‚ùå Error calling custom model for user {user_id}: {e}")
            self.send_message(chat_id, 
                "üòî **–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.**\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
            )
            return
        
        # Check if query is unclear
        if matches_response == "unclear_query":
            self.send_message(chat_id,
                "ü§î **–í–∞—à –∑–∞–ø–∏—Ç –Ω–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–ª–∏–π.**\n\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ñ–æ—Ä–º—É–ª—é–π—Ç–µ —Ç–æ—á–Ω—ñ—à–µ, —è–∫–∏—Ö –±—ñ–∑–Ω–µ—Å-–ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤ –≤–∏ —à—É–∫–∞—î—Ç–µ.\n\n"
                "**–ü—Ä–∏–∫–ª–∞–¥–∏ —á—ñ—Ç–∫–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤:**\n"
                "‚Ä¢ ¬´–®—É–∫–∞—é —Ñ–∞—Ö—ñ–≤—Ü—ñ–≤ —ñ–∑ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É –¥–ª—è IT-—Å—Ç–∞—Ä—Ç–∞–ø—É¬ª\n"
                "‚Ä¢ ¬´–ü–æ—Ç—Ä—ñ–±–Ω—ñ —ñ–Ω–≤–µ—Å—Ç–æ—Ä–∏ –¥–ª—è e-commerce –ø—Ä–æ—î–∫—Ç—É¬ª\n"
                "‚Ä¢ ¬´–•–æ—á—É –∑—É—Å—Ç—Ä—ñ—Ç–∏—Å—è –∑ –ø—ñ–¥–ø—Ä–∏—î–º—Ü—è–º–∏ —É —Å—Ñ–µ—Ä—ñ –æ—Ö–æ—Ä–æ–Ω–∏ –∑–¥–æ—Ä–æ–≤'—è¬ª\n"
                "‚Ä¢ ¬´–®—É–∫–∞—é –º–µ–Ω—Ç–æ—Ä—ñ–≤ —ñ–∑ digital-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É¬ª"
            )
            return
        
        try:
            # Try to parse JSON response
            import json
            logger.info(f"üîç Attempting to parse JSON response: {matches_response[:200]}...")
            match_data = json.loads(matches_response)
            logger.info(f"‚úÖ Successfully parsed JSON for user {user_id}")
            
            # Send structured match information
            match_message = f"üíº **–ó–Ω–∞–π–¥–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç: {match_data['name']}**\n"
            match_message += f"üßÆ **–ó–±—ñ–≥ - {match_data.get('match_percentage', '85')}%**\n\n"
            
            match_message += f"üìã **–ü—Ä–æ –µ–∫—Å–ø–µ—Ä—Ç–∞:**\n{match_data['description']}\n\n"
            
            # Add contact information if available
            if match_data.get('contact_info') and match_data['contact_info'] != '–ù–µ –≤–∫–∞–∑–∞–Ω–æ':
                match_message += f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:** {match_data['contact_info']}\n\n"
            
            match_message += f"‚ú® **–ß–æ–º—É –∫–æ—Ä–∏—Å–Ω–∏–π –¥–ª—è –≤–∞—Å:** {match_data['reason']}"
            
            self.send_message(chat_id, match_message)
            logger.info(f"‚úÖ Sent match result to user {user_id}")
                
        except (json.JSONDecodeError, KeyError) as e:
            # Fallback to direct text format
            logger.info(f"üìù Using direct text format for user {user_id}")
            self.send_message(chat_id, matches_response)
            logger.info(f"‚úÖ Sent match result (text format) to user {user_id}")
        
        # Log the search and result
        self.log_search(user_id, text, matches_response)
        
        # Only update search time and send follow-up messages if we successfully sent a match
        # Update last search time (24h limit)
        self.user_last_search_time[user_id] = datetime.now()
        logger.info(f"‚è∞ Updated search time for user {user_id}")
        
        # Send combined 24h limit and app promotion message
        logger.info(f"üì± Sending combined message to user {user_id}")
        combined_message = "–î—è–∫—É—é, —â–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–ª–∏—Å—å –±–æ—Ç–æ–º. –í–∏ –º–∞—î—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä–æ–±–∏—Ç–∏ –æ–¥–∏–Ω —Ç–∞–∫–∏–π –∑–∞–ø–∏—Ç —Ä–∞–∑ –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏.\n\nüí° –î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –±—ñ–ª—å—à–æ—ó –±–∞–∑–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤ —Ç–∞ –ø–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫ Business Match!\n\nüì± [–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Business Match](https://apps.apple.com/ua/app/business-match-social-app/id1547614364)"
        self.send_message(chat_id, combined_message)
        self.log_message(user_id, combined_message, True, "text")
        logger.info(f"‚úÖ Sent combined message to user {user_id}")
        
        # Generate and send audio summary
        try:
            logger.info(f"üéµ Generating audio summary for user {user_id}")
            audio_path = self.audio_handler.generate_audio_summary(matches_response, text)
            if audio_path:
                logger.info(f"üéµ Sending audio summary to user {user_id}")
                if self.send_audio(chat_id, audio_path):
                    logger.info(f"‚úÖ Audio summary sent to user {user_id}")
                else:
                    logger.error(f"‚ùå Failed to send audio summary to user {user_id}")
                # Clean up audio file
                self.audio_handler.cleanup_audio_file(audio_path)
            else:
                logger.error(f"‚ùå Failed to generate audio summary for user {user_id}")
        except Exception as e:
            logger.error(f"‚ùå Error with audio summary for user {user_id}: {e}")
    
    def handle_help_command(self, chat_id: int):
        """Handle /help command"""
        help_text = """
*ü§ñ –î–æ–ø–æ–º–æ–≥–∞ Business Match Bot*

*–ö–æ–º–∞–Ω–¥–∏:*
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏
/cancel - –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ä–æ–∑–º–æ–≤—É

*–Ø–∫ –∑–Ω–∞–π—Ç–∏ –±—ñ–∑–Ω–µ—Å-–∑–≤'—è–∑–∫–∏:*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å, —â–æ –≤–∏ —à—É–∫–∞—î—Ç–µ! –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
‚Ä¢ "–®—É–∫–∞—é –µ–∫—Å–ø–µ—Ä—Ç—ñ–≤ –∑ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É –≤ IT-—Å—Ç–∞—Ä—Ç–∞–ø–∞—Ö"
‚Ä¢ "–ü–æ—Ç—Ä—ñ–±–Ω—ñ —ñ–Ω–≤–µ—Å—Ç–æ—Ä–∏ –¥–ª—è –º–æ–≥–æ e-commerce –±—ñ–∑–Ω–µ—Å—É"
‚Ä¢ "–•–æ—á—É –∑—É—Å—Ç—Ä—ñ—Ç–∏—Å—è –∑ –ø—ñ–¥–ø—Ä–∏—î–º—Ü—è–º–∏ –≤ —Å—Ñ–µ—Ä—ñ –æ—Ö–æ—Ä–æ–Ω–∏ –∑–¥–æ—Ä–æ–≤'—è"

–ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î –Ω–∞—à—É –±–∞–∑—É –∑ 500+ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤ —ñ –Ω–∞–¥–∞—Å—Ç—å –≤–∞–º —Ç–æ–ø-3 –Ω–∞–π–∫—Ä–∞—â–∏—Ö –∑–±—ñ–≥—ñ–≤ –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏!

*–§—É–Ω–∫—Ü—ñ—ó:*
‚úÖ AI-–∑–±—ñ–≥–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ChatGPT
‚úÖ 500+ –±—ñ–∑–Ω–µ—Å-–ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
‚úÖ –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ
‚úÖ –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏—Ä–æ–¥–Ω–æ—ó –º–æ–≤–∏
"""
        self.send_message(chat_id, help_text)
    
    def process_update(self, update):
        """Process a single update"""
        try:
            if "message" not in update:
                return
            
            message = update["message"]
            chat_id = message["chat"]["id"]
            user_id = message["from"]["id"]
            text = message.get("text", "")
            
            logger.info(f"Received message from user {user_id}: {text[:50]}...")
            
            # Handle commands
            if text.startswith("/start"):
                # Get user info from the message
                user_info = message.get("from", {})
                self.handle_start_command(chat_id, user_id, user_info)
            elif text.startswith("/help"):
                self.handle_help_command(chat_id)
            elif text.startswith("/cancel"):
                self.send_message(chat_id, "‚úÖ –†–æ–∑–º–æ–≤—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É!")
            else:
                # Handle regular text messages
                if text.strip():
                    self.handle_text_message(chat_id, user_id, text)
                    
        except Exception as e:
            logger.error(f"Error processing update: {e}")
    
    def run(self):
        """Main bot loop"""
        logger.info("ü§ñ Starting Business Match Telegram Bot...")
        logger.info("üìä Database loaded: 500+ professionals")
        logger.info("üîç Ready to find business matches!")
        
        # Get bot info
        try:
            url = f"{self.base_url}/getMe"
            response = requests.get(url)
            bot_info = response.json()
            if bot_info.get("ok"):
                bot_name = bot_info["result"]["first_name"]
                bot_username = bot_info["result"]["username"]
                logger.info(f"‚úÖ Bot connected: {bot_name} (@{bot_username})")
            else:
                logger.error("‚ùå Failed to get bot info")
                return
        except Exception as e:
            logger.error(f"‚ùå Error connecting to Telegram: {e}")
            return
        
        logger.info("üîÑ Starting polling for messages...")
        logger.info("üõ°Ô∏è Duplicate message protection enabled")
        
        while True:
            try:
                # Get updates
                updates_response = self.get_updates()
                
                if not updates_response or not updates_response.get("ok"):
                    logger.warning("Failed to get updates")
                    time.sleep(5)
                    continue
                
                updates = updates_response["result"]
                
                # Process each update
                for update in updates:
                    update_id = update["update_id"]
                    
                    # Skip if we already processed this update
                    if update_id in self.processed_updates:
                        logger.info(f"üõ°Ô∏è Skipping duplicate update {update_id}")
                        self.last_update_id = update_id
                        continue
                    
                    # Mark as processed and process
                    self.processed_updates.add(update_id)
                    self.last_update_id = update_id
                    self.process_update(update)
                
                # Small delay to avoid overwhelming the API
                time.sleep(1)
                
            except KeyboardInterrupt:
                logger.info("üõë Bot stopped by user")
                break
            except Exception as e:
                logger.error(f"Error in main loop: {e}")
                time.sleep(5)
        
        # Cleanup on exit
        self._cleanup_lock()

def main():
    """Start the bot"""
    try:
        bot = SimpleTelegramBot()
        bot.run()
    except SystemExit:
        logger.info("üö´ Bot startup blocked - another instance is running")
    except Exception as e:
        logger.error(f"‚ùå Bot startup failed: {e}")
        raise

if __name__ == '__main__':
    main()



